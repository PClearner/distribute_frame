// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userservice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_userservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_userservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_userservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_userservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userservice_2eproto;
class args;
class argsDefaultTypeInternal;
extern argsDefaultTypeInternal _args_default_instance_;
class results;
class resultsDefaultTypeInternal;
extern resultsDefaultTypeInternal _results_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::args* Arena::CreateMaybeMessage<::args>(Arena*);
template<> ::results* Arena::CreateMaybeMessage<::results>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class args PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:args) */ {
 public:
  inline args() : args(nullptr) {};
  virtual ~args();

  args(const args& from);
  args(args&& from) noexcept
    : args() {
    *this = ::std::move(from);
  }

  inline args& operator=(const args& from) {
    CopyFrom(from);
    return *this;
  }
  inline args& operator=(args&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const args& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const args* internal_default_instance() {
    return reinterpret_cast<const args*>(
               &_args_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(args& a, args& b) {
    a.Swap(&b);
  }
  inline void Swap(args* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(args* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline args* New() const final {
    return CreateMaybeMessage<args>(nullptr);
  }

  args* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<args>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const args& from);
  void MergeFrom(const args& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(args* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "args";
  }
  protected:
  explicit args(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userservice_2eproto);
    return ::descriptor_table_userservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArg1FieldNumber = 1,
    kArg2FieldNumber = 2,
  };
  // int32 arg1 = 1;
  void clear_arg1();
  ::PROTOBUF_NAMESPACE_ID::int32 arg1() const;
  void set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arg1() const;
  void _internal_set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 arg2 = 2;
  void clear_arg2();
  ::PROTOBUF_NAMESPACE_ID::int32 arg2() const;
  void set_arg2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arg2() const;
  void _internal_set_arg2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:args)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 arg1_;
  ::PROTOBUF_NAMESPACE_ID::int32 arg2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userservice_2eproto;
};
// -------------------------------------------------------------------

class results PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:results) */ {
 public:
  inline results() : results(nullptr) {};
  virtual ~results();

  results(const results& from);
  results(results&& from) noexcept
    : results() {
    *this = ::std::move(from);
  }

  inline results& operator=(const results& from) {
    CopyFrom(from);
    return *this;
  }
  inline results& operator=(results&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const results& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const results* internal_default_instance() {
    return reinterpret_cast<const results*>(
               &_results_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(results& a, results& b) {
    a.Swap(&b);
  }
  inline void Swap(results* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(results* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline results* New() const final {
    return CreateMaybeMessage<results>(nullptr);
  }

  results* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<results>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const results& from);
  void MergeFrom(const results& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(results* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "results";
  }
  protected:
  explicit results(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_userservice_2eproto);
    return ::descriptor_table_userservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 2,
    kRes1FieldNumber = 1,
  };
  // bytes success = 2;
  void clear_success();
  const std::string& success() const;
  void set_success(const std::string& value);
  void set_success(std::string&& value);
  void set_success(const char* value);
  void set_success(const void* value, size_t size);
  std::string* mutable_success();
  std::string* release_success();
  void set_allocated_success(std::string* success);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_success();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_success(
      std::string* success);
  private:
  const std::string& _internal_success() const;
  void _internal_set_success(const std::string& value);
  std::string* _internal_mutable_success();
  public:

  // int32 res1 = 1;
  void clear_res1();
  ::PROTOBUF_NAMESPACE_ID::int32 res1() const;
  void set_res1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_res1() const;
  void _internal_set_res1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:results)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr success_;
  ::PROTOBUF_NAMESPACE_ID::int32 res1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_userservice_2eproto;
};
// ===================================================================

class Userservice_Stub;

class Userservice : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Userservice() {};
 public:
  virtual ~Userservice();

  typedef Userservice_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Add(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::args* request,
                       ::results* response,
                       ::google::protobuf::Closure* done);
  virtual void multi(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::args* request,
                       ::results* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Userservice);
};

class Userservice_Stub : public Userservice {
 public:
  Userservice_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Userservice_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Userservice_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Userservice ------------------------------------------

  void Add(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::args* request,
                       ::results* response,
                       ::google::protobuf::Closure* done);
  void multi(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::args* request,
                       ::results* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Userservice_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// args

// int32 arg1 = 1;
inline void args::clear_arg1() {
  arg1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 args::_internal_arg1() const {
  return arg1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 args::arg1() const {
  // @@protoc_insertion_point(field_get:args.arg1)
  return _internal_arg1();
}
inline void args::_internal_set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arg1_ = value;
}
inline void args::set_arg1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_arg1(value);
  // @@protoc_insertion_point(field_set:args.arg1)
}

// int32 arg2 = 2;
inline void args::clear_arg2() {
  arg2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 args::_internal_arg2() const {
  return arg2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 args::arg2() const {
  // @@protoc_insertion_point(field_get:args.arg2)
  return _internal_arg2();
}
inline void args::_internal_set_arg2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arg2_ = value;
}
inline void args::set_arg2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_arg2(value);
  // @@protoc_insertion_point(field_set:args.arg2)
}

// -------------------------------------------------------------------

// results

// int32 res1 = 1;
inline void results::clear_res1() {
  res1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 results::_internal_res1() const {
  return res1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 results::res1() const {
  // @@protoc_insertion_point(field_get:results.res1)
  return _internal_res1();
}
inline void results::_internal_set_res1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  res1_ = value;
}
inline void results::set_res1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_res1(value);
  // @@protoc_insertion_point(field_set:results.res1)
}

// bytes success = 2;
inline void results::clear_success() {
  success_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& results::success() const {
  // @@protoc_insertion_point(field_get:results.success)
  return _internal_success();
}
inline void results::set_success(const std::string& value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:results.success)
}
inline std::string* results::mutable_success() {
  // @@protoc_insertion_point(field_mutable:results.success)
  return _internal_mutable_success();
}
inline const std::string& results::_internal_success() const {
  return success_.Get();
}
inline void results::_internal_set_success(const std::string& value) {
  
  success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void results::set_success(std::string&& value) {
  
  success_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:results.success)
}
inline void results::set_success(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:results.success)
}
inline void results::set_success(const void* value,
    size_t size) {
  
  success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:results.success)
}
inline std::string* results::_internal_mutable_success() {
  
  return success_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* results::release_success() {
  // @@protoc_insertion_point(field_release:results.success)
  return success_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void results::set_allocated_success(std::string* success) {
  if (success != nullptr) {
    
  } else {
    
  }
  success_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), success,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:results.success)
}
inline std::string* results::unsafe_arena_release_success() {
  // @@protoc_insertion_point(field_unsafe_arena_release:results.success)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return success_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void results::unsafe_arena_set_allocated_success(
    std::string* success) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (success != nullptr) {
    
  } else {
    
  }
  success_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      success, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:results.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_userservice_2eproto
