// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: userservice.proto

#include "userservice.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class argsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<args> _instance;
} _args_default_instance_;
class resultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<results> _instance;
} _results_default_instance_;
static void InitDefaultsscc_info_args_userservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_args_default_instance_;
    new (ptr) ::args();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::args::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_args_userservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_args_userservice_2eproto}, {}};

static void InitDefaultsscc_info_results_userservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_results_default_instance_;
    new (ptr) ::results();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::results::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_results_userservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_results_userservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_userservice_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_userservice_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_userservice_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_userservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::args, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::args, arg1_),
  PROTOBUF_FIELD_OFFSET(::args, arg2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::results, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::results, res1_),
  PROTOBUF_FIELD_OFFSET(::results, success_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::args)},
  { 7, -1, sizeof(::results)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_args_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_results_default_instance_),
};

const char descriptor_table_protodef_userservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021userservice.proto\"\"\n\004args\022\014\n\004arg1\030\001 \001("
  "\005\022\014\n\004arg2\030\002 \001(\005\"(\n\007results\022\014\n\004res1\030\001 \001(\005"
  "\022\017\n\007success\030\002 \001(\0142\?\n\013Userservice\022\026\n\003Add\022"
  "\005.args\032\010.results\022\030\n\005multi\022\005.args\032\010.resul"
  "tsB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_userservice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_userservice_2eproto_sccs[2] = {
  &scc_info_args_userservice_2eproto.base,
  &scc_info_results_userservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_userservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_userservice_2eproto = {
  false, false, descriptor_table_protodef_userservice_2eproto, "userservice.proto", 175,
  &descriptor_table_userservice_2eproto_once, descriptor_table_userservice_2eproto_sccs, descriptor_table_userservice_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_userservice_2eproto::offsets,
  file_level_metadata_userservice_2eproto, 2, file_level_enum_descriptors_userservice_2eproto, file_level_service_descriptors_userservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_userservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_userservice_2eproto)), true);

// ===================================================================

void args::InitAsDefaultInstance() {
}
class args::_Internal {
 public:
};

args::args(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:args)
}
args::args(const args& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&arg1_, &from.arg1_,
    static_cast<size_t>(reinterpret_cast<char*>(&arg2_) -
    reinterpret_cast<char*>(&arg1_)) + sizeof(arg2_));
  // @@protoc_insertion_point(copy_constructor:args)
}

void args::SharedCtor() {
  ::memset(&arg1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arg2_) -
      reinterpret_cast<char*>(&arg1_)) + sizeof(arg2_));
}

args::~args() {
  // @@protoc_insertion_point(destructor:args)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void args::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void args::ArenaDtor(void* object) {
  args* _this = reinterpret_cast< args* >(object);
  (void)_this;
}
void args::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void args::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const args& args::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_args_userservice_2eproto.base);
  return *internal_default_instance();
}


void args::Clear() {
// @@protoc_insertion_point(message_clear_start:args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&arg1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arg2_) -
      reinterpret_cast<char*>(&arg1_)) + sizeof(arg2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* args::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 arg1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          arg1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 arg2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          arg2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* args::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:args)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg1 = 1;
  if (this->arg1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_arg1(), target);
  }

  // int32 arg2 = 2;
  if (this->arg2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_arg2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:args)
  return target;
}

size_t args::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:args)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 arg1 = 1;
  if (this->arg1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arg1());
  }

  // int32 arg2 = 2;
  if (this->arg2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arg2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void args::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:args)
  GOOGLE_DCHECK_NE(&from, this);
  const args* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<args>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:args)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:args)
    MergeFrom(*source);
  }
}

void args::MergeFrom(const args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:args)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arg1() != 0) {
    _internal_set_arg1(from._internal_arg1());
  }
  if (from.arg2() != 0) {
    _internal_set_arg2(from._internal_arg2());
  }
}

void args::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void args::CopyFrom(const args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool args::IsInitialized() const {
  return true;
}

void args::InternalSwap(args* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(args, arg2_)
      + sizeof(args::arg2_)
      - PROTOBUF_FIELD_OFFSET(args, arg1_)>(
          reinterpret_cast<char*>(&arg1_),
          reinterpret_cast<char*>(&other->arg1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata args::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void results::InitAsDefaultInstance() {
}
class results::_Internal {
 public:
};

results::results(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:results)
}
results::results(const results& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_success().empty()) {
    success_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_success(),
      GetArena());
  }
  res1_ = from.res1_;
  // @@protoc_insertion_point(copy_constructor:results)
}

void results::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_results_userservice_2eproto.base);
  success_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  res1_ = 0;
}

results::~results() {
  // @@protoc_insertion_point(destructor:results)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void results::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  success_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void results::ArenaDtor(void* object) {
  results* _this = reinterpret_cast< results* >(object);
  (void)_this;
}
void results::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void results::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const results& results::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_results_userservice_2eproto.base);
  return *internal_default_instance();
}


void results::Clear() {
// @@protoc_insertion_point(message_clear_start:results)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  res1_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* results::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 res1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          res1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_success();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* results::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:results)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 res1 = 1;
  if (this->res1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_res1(), target);
  }

  // bytes success = 2;
  if (this->success().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:results)
  return target;
}

size_t results::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:results)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes success = 2;
  if (this->success().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_success());
  }

  // int32 res1 = 1;
  if (this->res1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_res1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void results::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:results)
  GOOGLE_DCHECK_NE(&from, this);
  const results* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<results>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:results)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:results)
    MergeFrom(*source);
  }
}

void results::MergeFrom(const results& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:results)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success().size() > 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.res1() != 0) {
    _internal_set_res1(from._internal_res1());
  }
}

void results::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:results)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void results::CopyFrom(const results& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:results)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool results::IsInitialized() const {
  return true;
}

void results::InternalSwap(results* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  success_.Swap(&other->success_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(res1_, other->res1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata results::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Userservice::~Userservice() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Userservice::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_userservice_2eproto);
  return file_level_service_descriptors_userservice_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Userservice::GetDescriptor() {
  return descriptor();
}

void Userservice::Add(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::args*,
                         ::results*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Add() not implemented.");
  done->Run();
}

void Userservice::multi(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::args*,
                         ::results*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method multi() not implemented.");
  done->Run();
}

void Userservice::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_userservice_2eproto[0]);
  switch(method->index()) {
    case 0:
      Add(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::args*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::results*>(
                 response),
             done);
      break;
    case 1:
      multi(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::args*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::results*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Userservice::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::args::default_instance();
    case 1:
      return ::args::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Userservice::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::results::default_instance();
    case 1:
      return ::results::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Userservice_Stub::Userservice_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Userservice_Stub::Userservice_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Userservice_Stub::~Userservice_Stub() {
  if (owns_channel_) delete channel_;
}

void Userservice_Stub::Add(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::args* request,
                              ::results* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Userservice_Stub::multi(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::args* request,
                              ::results* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::args* Arena::CreateMaybeMessage< ::args >(Arena* arena) {
  return Arena::CreateMessageInternal< ::args >(arena);
}
template<> PROTOBUF_NOINLINE ::results* Arena::CreateMaybeMessage< ::results >(Arena* arena) {
  return Arena::CreateMessageInternal< ::results >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
