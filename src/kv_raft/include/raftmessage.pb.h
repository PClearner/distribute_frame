// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raftmessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raftmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raftmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raftmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raftmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raftmessage_2eproto;
namespace raft {
class AppendEntries;
class AppendEntriesDefaultTypeInternal;
extern AppendEntriesDefaultTypeInternal _AppendEntries_default_instance_;
class AppendEntriesResponse;
class AppendEntriesResponseDefaultTypeInternal;
extern AppendEntriesResponseDefaultTypeInternal _AppendEntriesResponse_default_instance_;
class ClientRequest;
class ClientRequestDefaultTypeInternal;
extern ClientRequestDefaultTypeInternal _ClientRequest_default_instance_;
class ClientResponse;
class ClientResponseDefaultTypeInternal;
extern ClientResponseDefaultTypeInternal _ClientResponse_default_instance_;
class LogEntry;
class LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class RequestVote;
class RequestVoteDefaultTypeInternal;
extern RequestVoteDefaultTypeInternal _RequestVote_default_instance_;
class RequestVoteResponse;
class RequestVoteResponseDefaultTypeInternal;
extern RequestVoteResponseDefaultTypeInternal _RequestVoteResponse_default_instance_;
}  // namespace raft
PROTOBUF_NAMESPACE_OPEN
template<> ::raft::AppendEntries* Arena::CreateMaybeMessage<::raft::AppendEntries>(Arena*);
template<> ::raft::AppendEntriesResponse* Arena::CreateMaybeMessage<::raft::AppendEntriesResponse>(Arena*);
template<> ::raft::ClientRequest* Arena::CreateMaybeMessage<::raft::ClientRequest>(Arena*);
template<> ::raft::ClientResponse* Arena::CreateMaybeMessage<::raft::ClientResponse>(Arena*);
template<> ::raft::LogEntry* Arena::CreateMaybeMessage<::raft::LogEntry>(Arena*);
template<> ::raft::RequestVote* Arena::CreateMaybeMessage<::raft::RequestVote>(Arena*);
template<> ::raft::RequestVoteResponse* Arena::CreateMaybeMessage<::raft::RequestVoteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raft {

// ===================================================================

class LogEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.LogEntry) */ {
 public:
  inline LogEntry() : LogEntry(nullptr) {};
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogEntry* New() const final {
    return CreateMaybeMessage<LogEntry>(nullptr);
  }

  LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.LogEntry";
  }
  protected:
  explicit LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftmessage_2eproto);
    return ::descriptor_table_raftmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 3,
    kIndexFieldNumber = 1,
    kTermFieldNumber = 2,
  };
  // string command = 3;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_command();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_command(
      std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // uint64 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 term = 2;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:raft.LogEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftmessage_2eproto;
};
// -------------------------------------------------------------------

class RequestVote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.RequestVote) */ {
 public:
  inline RequestVote() : RequestVote(nullptr) {};
  virtual ~RequestVote();

  RequestVote(const RequestVote& from);
  RequestVote(RequestVote&& from) noexcept
    : RequestVote() {
    *this = ::std::move(from);
  }

  inline RequestVote& operator=(const RequestVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVote& operator=(RequestVote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVote* internal_default_instance() {
    return reinterpret_cast<const RequestVote*>(
               &_RequestVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestVote& a, RequestVote& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVote* New() const final {
    return CreateMaybeMessage<RequestVote>(nullptr);
  }

  RequestVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVote& from);
  void MergeFrom(const RequestVote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.RequestVote";
  }
  protected:
  explicit RequestVote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftmessage_2eproto);
    return ::descriptor_table_raftmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateIdFieldNumber = 2,
    kTermFieldNumber = 1,
    kLastLogIndexFieldNumber = 3,
    kLastLogTermFieldNumber = 4,
  };
  // string candidate_id = 2;
  void clear_candidate_id();
  const std::string& candidate_id() const;
  void set_candidate_id(const std::string& value);
  void set_candidate_id(std::string&& value);
  void set_candidate_id(const char* value);
  void set_candidate_id(const char* value, size_t size);
  std::string* mutable_candidate_id();
  std::string* release_candidate_id();
  void set_allocated_candidate_id(std::string* candidate_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_candidate_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_candidate_id(
      std::string* candidate_id);
  private:
  const std::string& _internal_candidate_id() const;
  void _internal_set_candidate_id(const std::string& value);
  std::string* _internal_mutable_candidate_id();
  public:

  // uint64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 last_log_index = 3;
  void clear_last_log_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_log_index() const;
  void set_last_log_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_log_index() const;
  void _internal_set_last_log_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 last_log_term = 4;
  void clear_last_log_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_log_term() const;
  void set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_log_term() const;
  void _internal_set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:raft.RequestVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidate_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_log_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_log_term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftmessage_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.RequestVoteResponse) */ {
 public:
  inline RequestVoteResponse() : RequestVoteResponse(nullptr) {};
  virtual ~RequestVoteResponse();

  RequestVoteResponse(const RequestVoteResponse& from);
  RequestVoteResponse(RequestVoteResponse&& from) noexcept
    : RequestVoteResponse() {
    *this = ::std::move(from);
  }

  inline RequestVoteResponse& operator=(const RequestVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteResponse& operator=(RequestVoteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestVoteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteResponse* internal_default_instance() {
    return reinterpret_cast<const RequestVoteResponse*>(
               &_RequestVoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestVoteResponse& a, RequestVoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteResponse* New() const final {
    return CreateMaybeMessage<RequestVoteResponse>(nullptr);
  }

  RequestVoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestVoteResponse& from);
  void MergeFrom(const RequestVoteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.RequestVoteResponse";
  }
  protected:
  explicit RequestVoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftmessage_2eproto);
    return ::descriptor_table_raftmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
  };
  // uint64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool vote_granted = 2;
  void clear_vote_granted();
  bool vote_granted() const;
  void set_vote_granted(bool value);
  private:
  bool _internal_vote_granted() const;
  void _internal_set_vote_granted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:raft.RequestVoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  bool vote_granted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftmessage_2eproto;
};
// -------------------------------------------------------------------

class AppendEntries PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.AppendEntries) */ {
 public:
  inline AppendEntries() : AppendEntries(nullptr) {};
  virtual ~AppendEntries();

  AppendEntries(const AppendEntries& from);
  AppendEntries(AppendEntries&& from) noexcept
    : AppendEntries() {
    *this = ::std::move(from);
  }

  inline AppendEntries& operator=(const AppendEntries& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntries& operator=(AppendEntries&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntries* internal_default_instance() {
    return reinterpret_cast<const AppendEntries*>(
               &_AppendEntries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AppendEntries& a, AppendEntries& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntries* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntries* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntries* New() const final {
    return CreateMaybeMessage<AppendEntries>(nullptr);
  }

  AppendEntries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntries>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntries& from);
  void MergeFrom(const AppendEntries& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntries* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.AppendEntries";
  }
  protected:
  explicit AppendEntries(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftmessage_2eproto);
    return ::descriptor_table_raftmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 5,
    kLeaderIdFieldNumber = 2,
    kTermFieldNumber = 1,
    kPrevLogIndexFieldNumber = 3,
    kPrevLogTermFieldNumber = 4,
    kLeaderCommitFieldNumber = 6,
  };
  // repeated .raft.LogEntry entries = 5;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::raft::LogEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::LogEntry >*
      mutable_entries();
  private:
  const ::raft::LogEntry& _internal_entries(int index) const;
  ::raft::LogEntry* _internal_add_entries();
  public:
  const ::raft::LogEntry& entries(int index) const;
  ::raft::LogEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::LogEntry >&
      entries() const;

  // string leader_id = 2;
  void clear_leader_id();
  const std::string& leader_id() const;
  void set_leader_id(const std::string& value);
  void set_leader_id(std::string&& value);
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  std::string* mutable_leader_id();
  std::string* release_leader_id();
  void set_allocated_leader_id(std::string* leader_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_leader_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_leader_id(
      std::string* leader_id);
  private:
  const std::string& _internal_leader_id() const;
  void _internal_set_leader_id(const std::string& value);
  std::string* _internal_mutable_leader_id();
  public:

  // uint64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 prev_log_index = 3;
  void clear_prev_log_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 prev_log_index() const;
  void set_prev_log_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prev_log_index() const;
  void _internal_set_prev_log_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 prev_log_term = 4;
  void clear_prev_log_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 prev_log_term() const;
  void set_prev_log_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_prev_log_term() const;
  void _internal_set_prev_log_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 leader_commit = 6;
  void clear_leader_commit();
  ::PROTOBUF_NAMESPACE_ID::uint64 leader_commit() const;
  void set_leader_commit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_leader_commit() const;
  void _internal_set_leader_commit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:raft.AppendEntries)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::LogEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prev_log_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 prev_log_term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 leader_commit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftmessage_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.AppendEntriesResponse) */ {
 public:
  inline AppendEntriesResponse() : AppendEntriesResponse(nullptr) {};
  virtual ~AppendEntriesResponse();

  AppendEntriesResponse(const AppendEntriesResponse& from);
  AppendEntriesResponse(AppendEntriesResponse&& from) noexcept
    : AppendEntriesResponse() {
    *this = ::std::move(from);
  }

  inline AppendEntriesResponse& operator=(const AppendEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesResponse& operator=(AppendEntriesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendEntriesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesResponse* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesResponse*>(
               &_AppendEntriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AppendEntriesResponse& a, AppendEntriesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesResponse* New() const final {
    return CreateMaybeMessage<AppendEntriesResponse>(nullptr);
  }

  AppendEntriesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendEntriesResponse& from);
  void MergeFrom(const AppendEntriesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.AppendEntriesResponse";
  }
  protected:
  explicit AppendEntriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftmessage_2eproto);
    return ::descriptor_table_raftmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kConflictIndexFieldNumber = 3,
    kConflictTermFieldNumber = 4,
    kSuccessFieldNumber = 2,
  };
  // uint64 term = 1;
  void clear_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 term() const;
  void set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_term() const;
  void _internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 conflict_index = 3;
  void clear_conflict_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 conflict_index() const;
  void set_conflict_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_conflict_index() const;
  void _internal_set_conflict_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 conflict_term = 4;
  void clear_conflict_term();
  ::PROTOBUF_NAMESPACE_ID::uint64 conflict_term() const;
  void set_conflict_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_conflict_term() const;
  void _internal_set_conflict_term(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:raft.AppendEntriesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 term_;
  ::PROTOBUF_NAMESPACE_ID::uint64 conflict_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 conflict_term_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftmessage_2eproto;
};
// -------------------------------------------------------------------

class ClientRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.ClientRequest) */ {
 public:
  inline ClientRequest() : ClientRequest(nullptr) {};
  virtual ~ClientRequest();

  ClientRequest(const ClientRequest& from);
  ClientRequest(ClientRequest&& from) noexcept
    : ClientRequest() {
    *this = ::std::move(from);
  }

  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientRequest& operator=(ClientRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientRequest* internal_default_instance() {
    return reinterpret_cast<const ClientRequest*>(
               &_ClientRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClientRequest& a, ClientRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientRequest* New() const final {
    return CreateMaybeMessage<ClientRequest>(nullptr);
  }

  ClientRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientRequest& from);
  void MergeFrom(const ClientRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.ClientRequest";
  }
  protected:
  explicit ClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftmessage_2eproto);
    return ::descriptor_table_raftmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
    kIndexFieldNumber = 2,
    kStartFieldNumber = 3,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_command();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_command(
      std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // uint64 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool start = 3;
  void clear_start();
  bool start() const;
  void set_start(bool value);
  private:
  bool _internal_start() const;
  void _internal_set_start(bool value);
  public:

  // @@protoc_insertion_point(class_scope:raft.ClientRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  bool start_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftmessage_2eproto;
};
// -------------------------------------------------------------------

class ClientResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raft.ClientResponse) */ {
 public:
  inline ClientResponse() : ClientResponse(nullptr) {};
  virtual ~ClientResponse();

  ClientResponse(const ClientResponse& from);
  ClientResponse(ClientResponse&& from) noexcept
    : ClientResponse() {
    *this = ::std::move(from);
  }

  inline ClientResponse& operator=(const ClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientResponse& operator=(ClientResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientResponse* internal_default_instance() {
    return reinterpret_cast<const ClientResponse*>(
               &_ClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClientResponse& a, ClientResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientResponse* New() const final {
    return CreateMaybeMessage<ClientResponse>(nullptr);
  }

  ClientResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientResponse& from);
  void MergeFrom(const ClientResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raft.ClientResponse";
  }
  protected:
  explicit ClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raftmessage_2eproto);
    return ::descriptor_table_raftmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderidFieldNumber = 2,
    kReasonFieldNumber = 4,
    kIndexFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string leaderid = 2;
  void clear_leaderid();
  const std::string& leaderid() const;
  void set_leaderid(const std::string& value);
  void set_leaderid(std::string&& value);
  void set_leaderid(const char* value);
  void set_leaderid(const char* value, size_t size);
  std::string* mutable_leaderid();
  std::string* release_leaderid();
  void set_allocated_leaderid(std::string* leaderid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_leaderid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_leaderid(
      std::string* leaderid);
  private:
  const std::string& _internal_leaderid() const;
  void _internal_set_leaderid(const std::string& value);
  std::string* _internal_mutable_leaderid();
  public:

  // string reason = 4;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_reason();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reason(
      std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // uint64 index = 3;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:raft.ClientResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raftmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogEntry

// uint64 index = 1;
inline void LogEntry::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogEntry::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogEntry::index() const {
  // @@protoc_insertion_point(field_get:raft.LogEntry.index)
  return _internal_index();
}
inline void LogEntry::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
}
inline void LogEntry::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:raft.LogEntry.index)
}

// uint64 term = 2;
inline void LogEntry::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogEntry::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LogEntry::term() const {
  // @@protoc_insertion_point(field_get:raft.LogEntry.term)
  return _internal_term();
}
inline void LogEntry::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void LogEntry::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.LogEntry.term)
}

// string command = 3;
inline void LogEntry::clear_command() {
  command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LogEntry::command() const {
  // @@protoc_insertion_point(field_get:raft.LogEntry.command)
  return _internal_command();
}
inline void LogEntry::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:raft.LogEntry.command)
}
inline std::string* LogEntry::mutable_command() {
  // @@protoc_insertion_point(field_mutable:raft.LogEntry.command)
  return _internal_mutable_command();
}
inline const std::string& LogEntry::_internal_command() const {
  return command_.Get();
}
inline void LogEntry::_internal_set_command(const std::string& value) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LogEntry::set_command(std::string&& value) {
  
  command_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raft.LogEntry.command)
}
inline void LogEntry::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raft.LogEntry.command)
}
inline void LogEntry::set_command(const char* value,
    size_t size) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raft.LogEntry.command)
}
inline std::string* LogEntry::_internal_mutable_command() {
  
  return command_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LogEntry::release_command() {
  // @@protoc_insertion_point(field_release:raft.LogEntry.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogEntry::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raft.LogEntry.command)
}
inline std::string* LogEntry::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raft.LogEntry.command)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return command_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LogEntry::unsafe_arena_set_allocated_command(
    std::string* command) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (command != nullptr) {
    
  } else {
    
  }
  command_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      command, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft.LogEntry.command)
}

// -------------------------------------------------------------------

// RequestVote

// uint64 term = 1;
inline void RequestVote::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVote::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVote::term() const {
  // @@protoc_insertion_point(field_get:raft.RequestVote.term)
  return _internal_term();
}
inline void RequestVote::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void RequestVote::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.RequestVote.term)
}

// string candidate_id = 2;
inline void RequestVote::clear_candidate_id() {
  candidate_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RequestVote::candidate_id() const {
  // @@protoc_insertion_point(field_get:raft.RequestVote.candidate_id)
  return _internal_candidate_id();
}
inline void RequestVote::set_candidate_id(const std::string& value) {
  _internal_set_candidate_id(value);
  // @@protoc_insertion_point(field_set:raft.RequestVote.candidate_id)
}
inline std::string* RequestVote::mutable_candidate_id() {
  // @@protoc_insertion_point(field_mutable:raft.RequestVote.candidate_id)
  return _internal_mutable_candidate_id();
}
inline const std::string& RequestVote::_internal_candidate_id() const {
  return candidate_id_.Get();
}
inline void RequestVote::_internal_set_candidate_id(const std::string& value) {
  
  candidate_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RequestVote::set_candidate_id(std::string&& value) {
  
  candidate_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raft.RequestVote.candidate_id)
}
inline void RequestVote::set_candidate_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  candidate_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raft.RequestVote.candidate_id)
}
inline void RequestVote::set_candidate_id(const char* value,
    size_t size) {
  
  candidate_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raft.RequestVote.candidate_id)
}
inline std::string* RequestVote::_internal_mutable_candidate_id() {
  
  return candidate_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RequestVote::release_candidate_id() {
  // @@protoc_insertion_point(field_release:raft.RequestVote.candidate_id)
  return candidate_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RequestVote::set_allocated_candidate_id(std::string* candidate_id) {
  if (candidate_id != nullptr) {
    
  } else {
    
  }
  candidate_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidate_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raft.RequestVote.candidate_id)
}
inline std::string* RequestVote::unsafe_arena_release_candidate_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raft.RequestVote.candidate_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return candidate_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RequestVote::unsafe_arena_set_allocated_candidate_id(
    std::string* candidate_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (candidate_id != nullptr) {
    
  } else {
    
  }
  candidate_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      candidate_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft.RequestVote.candidate_id)
}

// uint64 last_log_index = 3;
inline void RequestVote::clear_last_log_index() {
  last_log_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVote::_internal_last_log_index() const {
  return last_log_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVote::last_log_index() const {
  // @@protoc_insertion_point(field_get:raft.RequestVote.last_log_index)
  return _internal_last_log_index();
}
inline void RequestVote::_internal_set_last_log_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_log_index_ = value;
}
inline void RequestVote::set_last_log_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_log_index(value);
  // @@protoc_insertion_point(field_set:raft.RequestVote.last_log_index)
}

// uint64 last_log_term = 4;
inline void RequestVote::clear_last_log_term() {
  last_log_term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVote::_internal_last_log_term() const {
  return last_log_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVote::last_log_term() const {
  // @@protoc_insertion_point(field_get:raft.RequestVote.last_log_term)
  return _internal_last_log_term();
}
inline void RequestVote::_internal_set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_log_term_ = value;
}
inline void RequestVote::set_last_log_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_log_term(value);
  // @@protoc_insertion_point(field_set:raft.RequestVote.last_log_term)
}

// -------------------------------------------------------------------

// RequestVoteResponse

// uint64 term = 1;
inline void RequestVoteResponse::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteResponse::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RequestVoteResponse::term() const {
  // @@protoc_insertion_point(field_get:raft.RequestVoteResponse.term)
  return _internal_term();
}
inline void RequestVoteResponse::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void RequestVoteResponse::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.RequestVoteResponse.term)
}

// bool vote_granted = 2;
inline void RequestVoteResponse::clear_vote_granted() {
  vote_granted_ = false;
}
inline bool RequestVoteResponse::_internal_vote_granted() const {
  return vote_granted_;
}
inline bool RequestVoteResponse::vote_granted() const {
  // @@protoc_insertion_point(field_get:raft.RequestVoteResponse.vote_granted)
  return _internal_vote_granted();
}
inline void RequestVoteResponse::_internal_set_vote_granted(bool value) {
  
  vote_granted_ = value;
}
inline void RequestVoteResponse::set_vote_granted(bool value) {
  _internal_set_vote_granted(value);
  // @@protoc_insertion_point(field_set:raft.RequestVoteResponse.vote_granted)
}

// -------------------------------------------------------------------

// AppendEntries

// uint64 term = 1;
inline void AppendEntries::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntries::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntries::term() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntries.term)
  return _internal_term();
}
inline void AppendEntries::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void AppendEntries::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntries.term)
}

// string leader_id = 2;
inline void AppendEntries::clear_leader_id() {
  leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppendEntries::leader_id() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntries.leader_id)
  return _internal_leader_id();
}
inline void AppendEntries::set_leader_id(const std::string& value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntries.leader_id)
}
inline std::string* AppendEntries::mutable_leader_id() {
  // @@protoc_insertion_point(field_mutable:raft.AppendEntries.leader_id)
  return _internal_mutable_leader_id();
}
inline const std::string& AppendEntries::_internal_leader_id() const {
  return leader_id_.Get();
}
inline void AppendEntries::_internal_set_leader_id(const std::string& value) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppendEntries::set_leader_id(std::string&& value) {
  
  leader_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raft.AppendEntries.leader_id)
}
inline void AppendEntries::set_leader_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raft.AppendEntries.leader_id)
}
inline void AppendEntries::set_leader_id(const char* value,
    size_t size) {
  
  leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raft.AppendEntries.leader_id)
}
inline std::string* AppendEntries::_internal_mutable_leader_id() {
  
  return leader_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppendEntries::release_leader_id() {
  // @@protoc_insertion_point(field_release:raft.AppendEntries.leader_id)
  return leader_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppendEntries::set_allocated_leader_id(std::string* leader_id) {
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leader_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raft.AppendEntries.leader_id)
}
inline std::string* AppendEntries::unsafe_arena_release_leader_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raft.AppendEntries.leader_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return leader_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AppendEntries::unsafe_arena_set_allocated_leader_id(
    std::string* leader_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (leader_id != nullptr) {
    
  } else {
    
  }
  leader_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      leader_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft.AppendEntries.leader_id)
}

// uint64 prev_log_index = 3;
inline void AppendEntries::clear_prev_log_index() {
  prev_log_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntries::_internal_prev_log_index() const {
  return prev_log_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntries::prev_log_index() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntries.prev_log_index)
  return _internal_prev_log_index();
}
inline void AppendEntries::_internal_set_prev_log_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prev_log_index_ = value;
}
inline void AppendEntries::set_prev_log_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prev_log_index(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntries.prev_log_index)
}

// uint64 prev_log_term = 4;
inline void AppendEntries::clear_prev_log_term() {
  prev_log_term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntries::_internal_prev_log_term() const {
  return prev_log_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntries::prev_log_term() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntries.prev_log_term)
  return _internal_prev_log_term();
}
inline void AppendEntries::_internal_set_prev_log_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  prev_log_term_ = value;
}
inline void AppendEntries::set_prev_log_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_prev_log_term(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntries.prev_log_term)
}

// repeated .raft.LogEntry entries = 5;
inline int AppendEntries::_internal_entries_size() const {
  return entries_.size();
}
inline int AppendEntries::entries_size() const {
  return _internal_entries_size();
}
inline void AppendEntries::clear_entries() {
  entries_.Clear();
}
inline ::raft::LogEntry* AppendEntries::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raft.AppendEntries.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::LogEntry >*
AppendEntries::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raft.AppendEntries.entries)
  return &entries_;
}
inline const ::raft::LogEntry& AppendEntries::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::raft::LogEntry& AppendEntries::entries(int index) const {
  // @@protoc_insertion_point(field_get:raft.AppendEntries.entries)
  return _internal_entries(index);
}
inline ::raft::LogEntry* AppendEntries::_internal_add_entries() {
  return entries_.Add();
}
inline ::raft::LogEntry* AppendEntries::add_entries() {
  // @@protoc_insertion_point(field_add:raft.AppendEntries.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raft::LogEntry >&
AppendEntries::entries() const {
  // @@protoc_insertion_point(field_list:raft.AppendEntries.entries)
  return entries_;
}

// uint64 leader_commit = 6;
inline void AppendEntries::clear_leader_commit() {
  leader_commit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntries::_internal_leader_commit() const {
  return leader_commit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntries::leader_commit() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntries.leader_commit)
  return _internal_leader_commit();
}
inline void AppendEntries::_internal_set_leader_commit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  leader_commit_ = value;
}
inline void AppendEntries::set_leader_commit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_leader_commit(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntries.leader_commit)
}

// -------------------------------------------------------------------

// AppendEntriesResponse

// uint64 term = 1;
inline void AppendEntriesResponse::clear_term() {
  term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesResponse::_internal_term() const {
  return term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesResponse::term() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesResponse.term)
  return _internal_term();
}
inline void AppendEntriesResponse::_internal_set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  term_ = value;
}
inline void AppendEntriesResponse::set_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntriesResponse.term)
}

// bool success = 2;
inline void AppendEntriesResponse::clear_success() {
  success_ = false;
}
inline bool AppendEntriesResponse::_internal_success() const {
  return success_;
}
inline bool AppendEntriesResponse::success() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesResponse.success)
  return _internal_success();
}
inline void AppendEntriesResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void AppendEntriesResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntriesResponse.success)
}

// uint64 conflict_index = 3;
inline void AppendEntriesResponse::clear_conflict_index() {
  conflict_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesResponse::_internal_conflict_index() const {
  return conflict_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesResponse::conflict_index() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesResponse.conflict_index)
  return _internal_conflict_index();
}
inline void AppendEntriesResponse::_internal_set_conflict_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  conflict_index_ = value;
}
inline void AppendEntriesResponse::set_conflict_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_conflict_index(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntriesResponse.conflict_index)
}

// uint64 conflict_term = 4;
inline void AppendEntriesResponse::clear_conflict_term() {
  conflict_term_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesResponse::_internal_conflict_term() const {
  return conflict_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AppendEntriesResponse::conflict_term() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesResponse.conflict_term)
  return _internal_conflict_term();
}
inline void AppendEntriesResponse::_internal_set_conflict_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  conflict_term_ = value;
}
inline void AppendEntriesResponse::set_conflict_term(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_conflict_term(value);
  // @@protoc_insertion_point(field_set:raft.AppendEntriesResponse.conflict_term)
}

// -------------------------------------------------------------------

// ClientRequest

// string command = 1;
inline void ClientRequest::clear_command() {
  command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClientRequest::command() const {
  // @@protoc_insertion_point(field_get:raft.ClientRequest.command)
  return _internal_command();
}
inline void ClientRequest::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:raft.ClientRequest.command)
}
inline std::string* ClientRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:raft.ClientRequest.command)
  return _internal_mutable_command();
}
inline const std::string& ClientRequest::_internal_command() const {
  return command_.Get();
}
inline void ClientRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientRequest::set_command(std::string&& value) {
  
  command_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raft.ClientRequest.command)
}
inline void ClientRequest::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raft.ClientRequest.command)
}
inline void ClientRequest::set_command(const char* value,
    size_t size) {
  
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raft.ClientRequest.command)
}
inline std::string* ClientRequest::_internal_mutable_command() {
  
  return command_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientRequest::release_command() {
  // @@protoc_insertion_point(field_release:raft.ClientRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raft.ClientRequest.command)
}
inline std::string* ClientRequest::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raft.ClientRequest.command)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return command_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClientRequest::unsafe_arena_set_allocated_command(
    std::string* command) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (command != nullptr) {
    
  } else {
    
  }
  command_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      command, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft.ClientRequest.command)
}

// uint64 index = 2;
inline void ClientRequest::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClientRequest::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClientRequest::index() const {
  // @@protoc_insertion_point(field_get:raft.ClientRequest.index)
  return _internal_index();
}
inline void ClientRequest::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
}
inline void ClientRequest::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:raft.ClientRequest.index)
}

// bool start = 3;
inline void ClientRequest::clear_start() {
  start_ = false;
}
inline bool ClientRequest::_internal_start() const {
  return start_;
}
inline bool ClientRequest::start() const {
  // @@protoc_insertion_point(field_get:raft.ClientRequest.start)
  return _internal_start();
}
inline void ClientRequest::_internal_set_start(bool value) {
  
  start_ = value;
}
inline void ClientRequest::set_start(bool value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:raft.ClientRequest.start)
}

// -------------------------------------------------------------------

// ClientResponse

// bool success = 1;
inline void ClientResponse::clear_success() {
  success_ = false;
}
inline bool ClientResponse::_internal_success() const {
  return success_;
}
inline bool ClientResponse::success() const {
  // @@protoc_insertion_point(field_get:raft.ClientResponse.success)
  return _internal_success();
}
inline void ClientResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ClientResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:raft.ClientResponse.success)
}

// string leaderid = 2;
inline void ClientResponse::clear_leaderid() {
  leaderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClientResponse::leaderid() const {
  // @@protoc_insertion_point(field_get:raft.ClientResponse.leaderid)
  return _internal_leaderid();
}
inline void ClientResponse::set_leaderid(const std::string& value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:raft.ClientResponse.leaderid)
}
inline std::string* ClientResponse::mutable_leaderid() {
  // @@protoc_insertion_point(field_mutable:raft.ClientResponse.leaderid)
  return _internal_mutable_leaderid();
}
inline const std::string& ClientResponse::_internal_leaderid() const {
  return leaderid_.Get();
}
inline void ClientResponse::_internal_set_leaderid(const std::string& value) {
  
  leaderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientResponse::set_leaderid(std::string&& value) {
  
  leaderid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raft.ClientResponse.leaderid)
}
inline void ClientResponse::set_leaderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raft.ClientResponse.leaderid)
}
inline void ClientResponse::set_leaderid(const char* value,
    size_t size) {
  
  leaderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raft.ClientResponse.leaderid)
}
inline std::string* ClientResponse::_internal_mutable_leaderid() {
  
  return leaderid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientResponse::release_leaderid() {
  // @@protoc_insertion_point(field_release:raft.ClientResponse.leaderid)
  return leaderid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientResponse::set_allocated_leaderid(std::string* leaderid) {
  if (leaderid != nullptr) {
    
  } else {
    
  }
  leaderid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raft.ClientResponse.leaderid)
}
inline std::string* ClientResponse::unsafe_arena_release_leaderid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raft.ClientResponse.leaderid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return leaderid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClientResponse::unsafe_arena_set_allocated_leaderid(
    std::string* leaderid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (leaderid != nullptr) {
    
  } else {
    
  }
  leaderid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      leaderid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft.ClientResponse.leaderid)
}

// uint64 index = 3;
inline void ClientResponse::clear_index() {
  index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClientResponse::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClientResponse::index() const {
  // @@protoc_insertion_point(field_get:raft.ClientResponse.index)
  return _internal_index();
}
inline void ClientResponse::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_ = value;
}
inline void ClientResponse::set_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:raft.ClientResponse.index)
}

// string reason = 4;
inline void ClientResponse::clear_reason() {
  reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClientResponse::reason() const {
  // @@protoc_insertion_point(field_get:raft.ClientResponse.reason)
  return _internal_reason();
}
inline void ClientResponse::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:raft.ClientResponse.reason)
}
inline std::string* ClientResponse::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:raft.ClientResponse.reason)
  return _internal_mutable_reason();
}
inline const std::string& ClientResponse::_internal_reason() const {
  return reason_.Get();
}
inline void ClientResponse::_internal_set_reason(const std::string& value) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClientResponse::set_reason(std::string&& value) {
  
  reason_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raft.ClientResponse.reason)
}
inline void ClientResponse::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raft.ClientResponse.reason)
}
inline void ClientResponse::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raft.ClientResponse.reason)
}
inline std::string* ClientResponse::_internal_mutable_reason() {
  
  return reason_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClientResponse::release_reason() {
  // @@protoc_insertion_point(field_release:raft.ClientResponse.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raft.ClientResponse.reason)
}
inline std::string* ClientResponse::unsafe_arena_release_reason() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raft.ClientResponse.reason)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return reason_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClientResponse::unsafe_arena_set_allocated_reason(
    std::string* reason) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      reason, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raft.ClientResponse.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raftmessage_2eproto
