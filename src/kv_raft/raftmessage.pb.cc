// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raftmessage.proto

#include "kv_raft/include/raftmessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_raftmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogEntry_raftmessage_2eproto;
namespace raft
{
  class LogEntryDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogEntry> _instance;
  } _LogEntry_default_instance_;
  class RequestVoteDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestVote> _instance;
  } _RequestVote_default_instance_;
  class RequestVoteResponseDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestVoteResponse> _instance;
  } _RequestVoteResponse_default_instance_;
  class AppendEntriesDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendEntries> _instance;
  } _AppendEntries_default_instance_;
  class AppendEntriesResponseDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppendEntriesResponse> _instance;
  } _AppendEntriesResponse_default_instance_;
  class ClientRequestDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientRequest> _instance;
  } _ClientRequest_default_instance_;
  class ClientResponseDefaultTypeInternal
  {
  public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientResponse> _instance;
  } _ClientResponse_default_instance_;
} // namespace raft
static void InitDefaultsscc_info_AppendEntries_raftmessage_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::raft::_AppendEntries_default_instance_;
    new (ptr)::raft::AppendEntries();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::AppendEntries::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppendEntries_raftmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AppendEntries_raftmessage_2eproto}, {
                                                                                                                                                          &scc_info_LogEntry_raftmessage_2eproto.base,
                                                                                                                                                      }};

static void InitDefaultsscc_info_AppendEntriesResponse_raftmessage_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::raft::_AppendEntriesResponse_default_instance_;
    new (ptr)::raft::AppendEntriesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::AppendEntriesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppendEntriesResponse_raftmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AppendEntriesResponse_raftmessage_2eproto}, {}};

static void InitDefaultsscc_info_ClientRequest_raftmessage_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::raft::_ClientRequest_default_instance_;
    new (ptr)::raft::ClientRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::ClientRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientRequest_raftmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientRequest_raftmessage_2eproto}, {}};

static void InitDefaultsscc_info_ClientResponse_raftmessage_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::raft::_ClientResponse_default_instance_;
    new (ptr)::raft::ClientResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::ClientResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientResponse_raftmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClientResponse_raftmessage_2eproto}, {}};

static void InitDefaultsscc_info_LogEntry_raftmessage_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::raft::_LogEntry_default_instance_;
    new (ptr)::raft::LogEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::LogEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogEntry_raftmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogEntry_raftmessage_2eproto}, {}};

static void InitDefaultsscc_info_RequestVote_raftmessage_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::raft::_RequestVote_default_instance_;
    new (ptr)::raft::RequestVote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::RequestVote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestVote_raftmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestVote_raftmessage_2eproto}, {}};

static void InitDefaultsscc_info_RequestVoteResponse_raftmessage_2eproto()
{
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::raft::_RequestVoteResponse_default_instance_;
    new (ptr)::raft::RequestVoteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::RequestVoteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestVoteResponse_raftmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestVoteResponse_raftmessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_raftmessage_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const **file_level_enum_descriptors_raftmessage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const **file_level_service_descriptors_raftmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_raftmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::raft::LogEntry, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::raft::LogEntry, index_),
    PROTOBUF_FIELD_OFFSET(::raft::LogEntry, term_),
    PROTOBUF_FIELD_OFFSET(::raft::LogEntry, command_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::raft::RequestVote, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::raft::RequestVote, term_),
    PROTOBUF_FIELD_OFFSET(::raft::RequestVote, candidate_id_),
    PROTOBUF_FIELD_OFFSET(::raft::RequestVote, last_log_index_),
    PROTOBUF_FIELD_OFFSET(::raft::RequestVote, last_log_term_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::raft::RequestVoteResponse, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::raft::RequestVoteResponse, term_),
    PROTOBUF_FIELD_OFFSET(::raft::RequestVoteResponse, vote_granted_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::raft::AppendEntries, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::raft::AppendEntries, term_),
    PROTOBUF_FIELD_OFFSET(::raft::AppendEntries, leader_id_),
    PROTOBUF_FIELD_OFFSET(::raft::AppendEntries, prev_log_index_),
    PROTOBUF_FIELD_OFFSET(::raft::AppendEntries, prev_log_term_),
    PROTOBUF_FIELD_OFFSET(::raft::AppendEntries, entries_),
    PROTOBUF_FIELD_OFFSET(::raft::AppendEntries, leader_commit_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesResponse, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesResponse, term_),
    PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesResponse, success_),
    PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesResponse, conflict_index_),
    PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesResponse, conflict_term_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::raft::ClientRequest, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::raft::ClientRequest, command_),
    PROTOBUF_FIELD_OFFSET(::raft::ClientRequest, index_),
    PROTOBUF_FIELD_OFFSET(::raft::ClientRequest, start_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::raft::ClientResponse, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    PROTOBUF_FIELD_OFFSET(::raft::ClientResponse, success_),
    PROTOBUF_FIELD_OFFSET(::raft::ClientResponse, leaderid_),
    PROTOBUF_FIELD_OFFSET(::raft::ClientResponse, index_),
    PROTOBUF_FIELD_OFFSET(::raft::ClientResponse, reason_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    {0, -1, sizeof(::raft::LogEntry)},
    {8, -1, sizeof(::raft::RequestVote)},
    {17, -1, sizeof(::raft::RequestVoteResponse)},
    {24, -1, sizeof(::raft::AppendEntries)},
    {35, -1, sizeof(::raft::AppendEntriesResponse)},
    {44, -1, sizeof(::raft::ClientRequest)},
    {52, -1, sizeof(::raft::ClientResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] = {
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::raft::_LogEntry_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::raft::_RequestVote_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::raft::_RequestVoteResponse_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::raft::_AppendEntries_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::raft::_AppendEntriesResponse_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::raft::_ClientRequest_default_instance_),
    reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::raft::_ClientResponse_default_instance_),
};

const char descriptor_table_protodef_raftmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\021raftmessage.proto\022\004raft\"8\n\010LogEntry\022\r\n"
    "\005index\030\001 \001(\004\022\014\n\004term\030\002 \001(\004\022\017\n\007command\030\003 "
    "\001(\t\"`\n\013RequestVote\022\014\n\004term\030\001 \001(\004\022\024\n\014cand"
    "idate_id\030\002 \001(\t\022\026\n\016last_log_index\030\003 \001(\004\022\025"
    "\n\rlast_log_term\030\004 \001(\004\"9\n\023RequestVoteResp"
    "onse\022\014\n\004term\030\001 \001(\004\022\024\n\014vote_granted\030\002 \001(\010"
    "\"\227\001\n\rAppendEntries\022\014\n\004term\030\001 \001(\004\022\021\n\tlead"
    "er_id\030\002 \001(\t\022\026\n\016prev_log_index\030\003 \001(\004\022\025\n\rp"
    "rev_log_term\030\004 \001(\004\022\037\n\007entries\030\005 \003(\0132\016.ra"
    "ft.LogEntry\022\025\n\rleader_commit\030\006 \001(\004\"e\n\025Ap"
    "pendEntriesResponse\022\014\n\004term\030\001 \001(\004\022\017\n\007suc"
    "cess\030\002 \001(\010\022\026\n\016conflict_index\030\003 \001(\004\022\025\n\rco"
    "nflict_term\030\004 \001(\004\">\n\rClientRequest\022\017\n\007co"
    "mmand\030\001 \001(\t\022\r\n\005index\030\002 \001(\004\022\r\n\005start\030\003 \001("
    "\010\"R\n\016ClientResponse\022\017\n\007success\030\001 \001(\010\022\020\n\010"
    "leaderid\030\002 \001(\t\022\r\n\005index\030\003 \001(\004\022\016\n\006reason\030"
    "\004 \001(\tb\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *const descriptor_table_raftmessage_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase *const descriptor_table_raftmessage_2eproto_sccs[7] = {
    &scc_info_AppendEntries_raftmessage_2eproto.base,
    &scc_info_AppendEntriesResponse_raftmessage_2eproto.base,
    &scc_info_ClientRequest_raftmessage_2eproto.base,
    &scc_info_ClientResponse_raftmessage_2eproto.base,
    &scc_info_LogEntry_raftmessage_2eproto.base,
    &scc_info_RequestVote_raftmessage_2eproto.base,
    &scc_info_RequestVoteResponse_raftmessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_raftmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raftmessage_2eproto = {
    false,
    false,
    descriptor_table_protodef_raftmessage_2eproto,
    "raftmessage.proto",
    653,
    &descriptor_table_raftmessage_2eproto_once,
    descriptor_table_raftmessage_2eproto_sccs,
    descriptor_table_raftmessage_2eproto_deps,
    7,
    0,
    schemas,
    file_default_instances,
    TableStruct_raftmessage_2eproto::offsets,
    file_level_metadata_raftmessage_2eproto,
    7,
    file_level_enum_descriptors_raftmessage_2eproto,
    file_level_service_descriptors_raftmessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_raftmessage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_raftmessage_2eproto)), true);
namespace raft
{

  // ===================================================================

  void LogEntry::InitAsDefaultInstance()
  {
  }
  class LogEntry::_Internal
  {
  public:
  };

  LogEntry::LogEntry(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:raft.LogEntry)
  }
  LogEntry::LogEntry(const LogEntry &from)
      : ::PROTOBUF_NAMESPACE_ID::Message()
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_command().empty())
    {
      command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_command(),
                   GetArena());
    }
    ::memcpy(&index_, &from.index_,
             static_cast<size_t>(reinterpret_cast<char *>(&term_) -
                                 reinterpret_cast<char *>(&index_)) +
                 sizeof(term_));
    // @@protoc_insertion_point(copy_constructor:raft.LogEntry)
  }

  void LogEntry::SharedCtor()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogEntry_raftmessage_2eproto.base);
    command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(&index_, 0, static_cast<size_t>(reinterpret_cast<char *>(&term_) - reinterpret_cast<char *>(&index_)) + sizeof(term_));
  }

  LogEntry::~LogEntry()
  {
    // @@protoc_insertion_point(destructor:raft.LogEntry)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void LogEntry::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
    command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }

  void LogEntry::ArenaDtor(void *object)
  {
    LogEntry *_this = reinterpret_cast<LogEntry *>(object);
    (void)_this;
  }
  void LogEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void LogEntry::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const LogEntry &LogEntry::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogEntry_raftmessage_2eproto.base);
    return *internal_default_instance();
  }

  void LogEntry::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:raft.LogEntry)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::memset(&index_, 0, static_cast<size_t>(reinterpret_cast<char *>(&term_) - reinterpret_cast<char *>(&index_)) + sizeof(term_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *LogEntry::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // uint64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8))
        {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // uint64 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16))
        {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // string command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26))
        {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "raft.LogEntry.command"));
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    } // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *LogEntry::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:raft.LogEntry)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint64 index = 1;
    if (this->index() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_index(), target);
    }

    // uint64 term = 2;
    if (this->term() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_term(), target);
    }

    // string command = 3;
    if (this->command().size() > 0)
    {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "raft.LogEntry.command");
      target = stream->WriteStringMaybeAliased(
          3, this->_internal_command(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:raft.LogEntry)
    return target;
  }

  size_t LogEntry::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:raft.LogEntry)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string command = 3;
    if (this->command().size() > 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                        this->_internal_command());
    }

    // uint64 index = 1;
    if (this->index() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                        this->_internal_index());
    }

    // uint64 term = 2;
    if (this->term() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                        this->_internal_term());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void LogEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:raft.LogEntry)
    GOOGLE_DCHECK_NE(&from, this);
    const LogEntry *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogEntry>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.LogEntry)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.LogEntry)
      MergeFrom(*source);
    }
  }

  void LogEntry::MergeFrom(const LogEntry &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:raft.LogEntry)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.command().size() > 0)
    {
      _internal_set_command(from._internal_command());
    }
    if (from.index() != 0)
    {
      _internal_set_index(from._internal_index());
    }
    if (from.term() != 0)
    {
      _internal_set_term(from._internal_term());
    }
  }

  void LogEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:raft.LogEntry)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void LogEntry::CopyFrom(const LogEntry &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:raft.LogEntry)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool LogEntry::IsInitialized() const
  {
    return true;
  }

  void LogEntry::InternalSwap(LogEntry *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(LogEntry, term_) + sizeof(LogEntry::term_) - PROTOBUF_FIELD_OFFSET(LogEntry, index_)>(
        reinterpret_cast<char *>(&index_),
        reinterpret_cast<char *>(&other->index_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata LogEntry::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  void RequestVote::InitAsDefaultInstance()
  {
  }
  class RequestVote::_Internal
  {
  public:
  };

  RequestVote::RequestVote(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:raft.RequestVote)
  }
  RequestVote::RequestVote(const RequestVote &from)
      : ::PROTOBUF_NAMESPACE_ID::Message()
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    candidate_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_candidate_id().empty())
    {
      candidate_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_candidate_id(),
                        GetArena());
    }
    ::memcpy(&term_, &from.term_,
             static_cast<size_t>(reinterpret_cast<char *>(&last_log_term_) -
                                 reinterpret_cast<char *>(&term_)) +
                 sizeof(last_log_term_));
    // @@protoc_insertion_point(copy_constructor:raft.RequestVote)
  }

  void RequestVote::SharedCtor()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestVote_raftmessage_2eproto.base);
    candidate_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(&term_, 0, static_cast<size_t>(reinterpret_cast<char *>(&last_log_term_) - reinterpret_cast<char *>(&term_)) + sizeof(last_log_term_));
  }

  RequestVote::~RequestVote()
  {
    // @@protoc_insertion_point(destructor:raft.RequestVote)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void RequestVote::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
    candidate_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }

  void RequestVote::ArenaDtor(void *object)
  {
    RequestVote *_this = reinterpret_cast<RequestVote *>(object);
    (void)_this;
  }
  void RequestVote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void RequestVote::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const RequestVote &RequestVote::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestVote_raftmessage_2eproto.base);
    return *internal_default_instance();
  }

  void RequestVote::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:raft.RequestVote)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    candidate_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::memset(&term_, 0, static_cast<size_t>(reinterpret_cast<char *>(&last_log_term_) - reinterpret_cast<char *>(&term_)) + sizeof(last_log_term_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *RequestVote::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8))
        {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // string candidate_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18))
        {
          auto str = _internal_mutable_candidate_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "raft.RequestVote.candidate_id"));
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // uint64 last_log_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24))
        {
          last_log_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // uint64 last_log_term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32))
        {
          last_log_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    } // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *RequestVote::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:raft.RequestVote)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint64 term = 1;
    if (this->term() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_term(), target);
    }

    // string candidate_id = 2;
    if (this->candidate_id().size() > 0)
    {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          this->_internal_candidate_id().data(), static_cast<int>(this->_internal_candidate_id().length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "raft.RequestVote.candidate_id");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_candidate_id(), target);
    }

    // uint64 last_log_index = 3;
    if (this->last_log_index() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_log_index(), target);
    }

    // uint64 last_log_term = 4;
    if (this->last_log_term() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_last_log_term(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:raft.RequestVote)
    return target;
  }

  size_t RequestVote::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:raft.RequestVote)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string candidate_id = 2;
    if (this->candidate_id().size() > 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                        this->_internal_candidate_id());
    }

    // uint64 term = 1;
    if (this->term() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                        this->_internal_term());
    }

    // uint64 last_log_index = 3;
    if (this->last_log_index() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                        this->_internal_last_log_index());
    }

    // uint64 last_log_term = 4;
    if (this->last_log_term() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                        this->_internal_last_log_term());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void RequestVote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:raft.RequestVote)
    GOOGLE_DCHECK_NE(&from, this);
    const RequestVote *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestVote>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.RequestVote)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.RequestVote)
      MergeFrom(*source);
    }
  }

  void RequestVote::MergeFrom(const RequestVote &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:raft.RequestVote)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.candidate_id().size() > 0)
    {
      _internal_set_candidate_id(from._internal_candidate_id());
    }
    if (from.term() != 0)
    {
      _internal_set_term(from._internal_term());
    }
    if (from.last_log_index() != 0)
    {
      _internal_set_last_log_index(from._internal_last_log_index());
    }
    if (from.last_log_term() != 0)
    {
      _internal_set_last_log_term(from._internal_last_log_term());
    }
  }

  void RequestVote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:raft.RequestVote)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void RequestVote::CopyFrom(const RequestVote &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:raft.RequestVote)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool RequestVote::IsInitialized() const
  {
    return true;
  }

  void RequestVote::InternalSwap(RequestVote *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    candidate_id_.Swap(&other->candidate_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(RequestVote, last_log_term_) + sizeof(RequestVote::last_log_term_) - PROTOBUF_FIELD_OFFSET(RequestVote, term_)>(
        reinterpret_cast<char *>(&term_),
        reinterpret_cast<char *>(&other->term_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata RequestVote::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  void RequestVoteResponse::InitAsDefaultInstance()
  {
  }
  class RequestVoteResponse::_Internal
  {
  public:
  };

  RequestVoteResponse::RequestVoteResponse(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:raft.RequestVoteResponse)
  }
  RequestVoteResponse::RequestVoteResponse(const RequestVoteResponse &from)
      : ::PROTOBUF_NAMESPACE_ID::Message()
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&term_, &from.term_,
             static_cast<size_t>(reinterpret_cast<char *>(&vote_granted_) -
                                 reinterpret_cast<char *>(&term_)) +
                 sizeof(vote_granted_));
    // @@protoc_insertion_point(copy_constructor:raft.RequestVoteResponse)
  }

  void RequestVoteResponse::SharedCtor()
  {
    ::memset(&term_, 0, static_cast<size_t>(reinterpret_cast<char *>(&vote_granted_) - reinterpret_cast<char *>(&term_)) + sizeof(vote_granted_));
  }

  RequestVoteResponse::~RequestVoteResponse()
  {
    // @@protoc_insertion_point(destructor:raft.RequestVoteResponse)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void RequestVoteResponse::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
  }

  void RequestVoteResponse::ArenaDtor(void *object)
  {
    RequestVoteResponse *_this = reinterpret_cast<RequestVoteResponse *>(object);
    (void)_this;
  }
  void RequestVoteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void RequestVoteResponse::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const RequestVoteResponse &RequestVoteResponse::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestVoteResponse_raftmessage_2eproto.base);
    return *internal_default_instance();
  }

  void RequestVoteResponse::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:raft.RequestVoteResponse)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    ::memset(&term_, 0, static_cast<size_t>(reinterpret_cast<char *>(&vote_granted_) - reinterpret_cast<char *>(&term_)) + sizeof(vote_granted_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *RequestVoteResponse::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8))
        {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // bool vote_granted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16))
        {
          vote_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    } // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *RequestVoteResponse::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:raft.RequestVoteResponse)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint64 term = 1;
    if (this->term() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_term(), target);
    }

    // bool vote_granted = 2;
    if (this->vote_granted() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_vote_granted(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:raft.RequestVoteResponse)
    return target;
  }

  size_t RequestVoteResponse::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:raft.RequestVoteResponse)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // uint64 term = 1;
    if (this->term() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                        this->_internal_term());
    }

    // bool vote_granted = 2;
    if (this->vote_granted() != 0)
    {
      total_size += 1 + 1;
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void RequestVoteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:raft.RequestVoteResponse)
    GOOGLE_DCHECK_NE(&from, this);
    const RequestVoteResponse *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestVoteResponse>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.RequestVoteResponse)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.RequestVoteResponse)
      MergeFrom(*source);
    }
  }

  void RequestVoteResponse::MergeFrom(const RequestVoteResponse &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:raft.RequestVoteResponse)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.term() != 0)
    {
      _internal_set_term(from._internal_term());
    }
    if (from.vote_granted() != 0)
    {
      _internal_set_vote_granted(from._internal_vote_granted());
    }
  }

  void RequestVoteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:raft.RequestVoteResponse)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void RequestVoteResponse::CopyFrom(const RequestVoteResponse &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:raft.RequestVoteResponse)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool RequestVoteResponse::IsInitialized() const
  {
    return true;
  }

  void RequestVoteResponse::InternalSwap(RequestVoteResponse *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(RequestVoteResponse, vote_granted_) + sizeof(RequestVoteResponse::vote_granted_) - PROTOBUF_FIELD_OFFSET(RequestVoteResponse, term_)>(
        reinterpret_cast<char *>(&term_),
        reinterpret_cast<char *>(&other->term_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteResponse::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  void AppendEntries::InitAsDefaultInstance()
  {
  }
  class AppendEntries::_Internal
  {
  public:
  };

  AppendEntries::AppendEntries(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena),
        entries_(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:raft.AppendEntries)
  }
  AppendEntries::AppendEntries(const AppendEntries &from)
      : ::PROTOBUF_NAMESPACE_ID::Message(),
        entries_(from.entries_)
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_leader_id().empty())
    {
      leader_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leader_id(),
                     GetArena());
    }
    ::memcpy(&term_, &from.term_,
             static_cast<size_t>(reinterpret_cast<char *>(&leader_commit_) -
                                 reinterpret_cast<char *>(&term_)) +
                 sizeof(leader_commit_));
    // @@protoc_insertion_point(copy_constructor:raft.AppendEntries)
  }

  void AppendEntries::SharedCtor()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppendEntries_raftmessage_2eproto.base);
    leader_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(&term_, 0, static_cast<size_t>(reinterpret_cast<char *>(&leader_commit_) - reinterpret_cast<char *>(&term_)) + sizeof(leader_commit_));
  }

  AppendEntries::~AppendEntries()
  {
    // @@protoc_insertion_point(destructor:raft.AppendEntries)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void AppendEntries::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
    leader_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }

  void AppendEntries::ArenaDtor(void *object)
  {
    AppendEntries *_this = reinterpret_cast<AppendEntries *>(object);
    (void)_this;
  }
  void AppendEntries::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void AppendEntries::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const AppendEntries &AppendEntries::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendEntries_raftmessage_2eproto.base);
    return *internal_default_instance();
  }

  void AppendEntries::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:raft.AppendEntries)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    entries_.Clear();
    leader_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::memset(&term_, 0, static_cast<size_t>(reinterpret_cast<char *>(&leader_commit_) - reinterpret_cast<char *>(&term_)) + sizeof(leader_commit_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *AppendEntries::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8))
        {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // string leader_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18))
        {
          auto str = _internal_mutable_leader_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "raft.AppendEntries.leader_id"));
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // uint64 prev_log_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24))
        {
          prev_log_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // uint64 prev_log_term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32))
        {
          prev_log_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // repeated .raft.LogEntry entries = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42))
        {
          ptr -= 1;
          do
          {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr))
              break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        }
        else
          goto handle_unusual;
        continue;
      // uint64 leader_commit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48))
        {
          leader_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    } // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *AppendEntries::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:raft.AppendEntries)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint64 term = 1;
    if (this->term() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_term(), target);
    }

    // string leader_id = 2;
    if (this->leader_id().size() > 0)
    {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          this->_internal_leader_id().data(), static_cast<int>(this->_internal_leader_id().length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "raft.AppendEntries.leader_id");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_leader_id(), target);
    }

    // uint64 prev_log_index = 3;
    if (this->prev_log_index() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_prev_log_index(), target);
    }

    // uint64 prev_log_term = 4;
    if (this->prev_log_term() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_prev_log_term(), target);
    }

    // repeated .raft.LogEntry entries = 5;
    for (unsigned int i = 0,
                      n = static_cast<unsigned int>(this->_internal_entries_size());
         i < n; i++)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
          InternalWriteMessage(5, this->_internal_entries(i), target, stream);
    }

    // uint64 leader_commit = 6;
    if (this->leader_commit() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_leader_commit(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:raft.AppendEntries)
    return target;
  }

  size_t AppendEntries::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:raft.AppendEntries)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // repeated .raft.LogEntry entries = 5;
    total_size += 1UL * this->_internal_entries_size();
    for (const auto &msg : this->entries_)
    {
      total_size +=
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
    }

    // string leader_id = 2;
    if (this->leader_id().size() > 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                        this->_internal_leader_id());
    }

    // uint64 term = 1;
    if (this->term() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                        this->_internal_term());
    }

    // uint64 prev_log_index = 3;
    if (this->prev_log_index() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                        this->_internal_prev_log_index());
    }

    // uint64 prev_log_term = 4;
    if (this->prev_log_term() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                        this->_internal_prev_log_term());
    }

    // uint64 leader_commit = 6;
    if (this->leader_commit() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                        this->_internal_leader_commit());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void AppendEntries::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:raft.AppendEntries)
    GOOGLE_DCHECK_NE(&from, this);
    const AppendEntries *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendEntries>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.AppendEntries)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.AppendEntries)
      MergeFrom(*source);
    }
  }

  void AppendEntries::MergeFrom(const AppendEntries &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:raft.AppendEntries)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    entries_.MergeFrom(from.entries_);
    if (from.leader_id().size() > 0)
    {
      _internal_set_leader_id(from._internal_leader_id());
    }
    if (from.term() != 0)
    {
      _internal_set_term(from._internal_term());
    }
    if (from.prev_log_index() != 0)
    {
      _internal_set_prev_log_index(from._internal_prev_log_index());
    }
    if (from.prev_log_term() != 0)
    {
      _internal_set_prev_log_term(from._internal_prev_log_term());
    }
    if (from.leader_commit() != 0)
    {
      _internal_set_leader_commit(from._internal_leader_commit());
    }
  }

  void AppendEntries::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:raft.AppendEntries)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void AppendEntries::CopyFrom(const AppendEntries &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:raft.AppendEntries)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool AppendEntries::IsInitialized() const
  {
    return true;
  }

  void AppendEntries::InternalSwap(AppendEntries *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    entries_.InternalSwap(&other->entries_);
    leader_id_.Swap(&other->leader_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(AppendEntries, leader_commit_) + sizeof(AppendEntries::leader_commit_) - PROTOBUF_FIELD_OFFSET(AppendEntries, term_)>(
        reinterpret_cast<char *>(&term_),
        reinterpret_cast<char *>(&other->term_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata AppendEntries::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  void AppendEntriesResponse::InitAsDefaultInstance()
  {
  }
  class AppendEntriesResponse::_Internal
  {
  public:
  };

  AppendEntriesResponse::AppendEntriesResponse(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:raft.AppendEntriesResponse)
  }
  AppendEntriesResponse::AppendEntriesResponse(const AppendEntriesResponse &from)
      : ::PROTOBUF_NAMESPACE_ID::Message()
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&term_, &from.term_,
             static_cast<size_t>(reinterpret_cast<char *>(&success_) -
                                 reinterpret_cast<char *>(&term_)) +
                 sizeof(success_));
    // @@protoc_insertion_point(copy_constructor:raft.AppendEntriesResponse)
  }

  void AppendEntriesResponse::SharedCtor()
  {
    ::memset(&term_, 0, static_cast<size_t>(reinterpret_cast<char *>(&success_) - reinterpret_cast<char *>(&term_)) + sizeof(success_));
  }

  AppendEntriesResponse::~AppendEntriesResponse()
  {
    // @@protoc_insertion_point(destructor:raft.AppendEntriesResponse)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void AppendEntriesResponse::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
  }

  void AppendEntriesResponse::ArenaDtor(void *object)
  {
    AppendEntriesResponse *_this = reinterpret_cast<AppendEntriesResponse *>(object);
    (void)_this;
  }
  void AppendEntriesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void AppendEntriesResponse::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const AppendEntriesResponse &AppendEntriesResponse::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppendEntriesResponse_raftmessage_2eproto.base);
    return *internal_default_instance();
  }

  void AppendEntriesResponse::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:raft.AppendEntriesResponse)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    ::memset(&term_, 0, static_cast<size_t>(reinterpret_cast<char *>(&success_) - reinterpret_cast<char *>(&term_)) + sizeof(success_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *AppendEntriesResponse::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8))
        {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16))
        {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // uint64 conflict_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24))
        {
          conflict_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // uint64 conflict_term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32))
        {
          conflict_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    } // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *AppendEntriesResponse::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:raft.AppendEntriesResponse)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // uint64 term = 1;
    if (this->term() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_term(), target);
    }

    // bool success = 2;
    if (this->success() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
    }

    // uint64 conflict_index = 3;
    if (this->conflict_index() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_conflict_index(), target);
    }

    // uint64 conflict_term = 4;
    if (this->conflict_term() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_conflict_term(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:raft.AppendEntriesResponse)
    return target;
  }

  size_t AppendEntriesResponse::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:raft.AppendEntriesResponse)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // uint64 term = 1;
    if (this->term() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                        this->_internal_term());
    }

    // uint64 conflict_index = 3;
    if (this->conflict_index() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                        this->_internal_conflict_index());
    }

    // uint64 conflict_term = 4;
    if (this->conflict_term() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                        this->_internal_conflict_term());
    }

    // bool success = 2;
    if (this->success() != 0)
    {
      total_size += 1 + 1;
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void AppendEntriesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:raft.AppendEntriesResponse)
    GOOGLE_DCHECK_NE(&from, this);
    const AppendEntriesResponse *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppendEntriesResponse>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.AppendEntriesResponse)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.AppendEntriesResponse)
      MergeFrom(*source);
    }
  }

  void AppendEntriesResponse::MergeFrom(const AppendEntriesResponse &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:raft.AppendEntriesResponse)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.term() != 0)
    {
      _internal_set_term(from._internal_term());
    }
    if (from.conflict_index() != 0)
    {
      _internal_set_conflict_index(from._internal_conflict_index());
    }
    if (from.conflict_term() != 0)
    {
      _internal_set_conflict_term(from._internal_conflict_term());
    }
    if (from.success() != 0)
    {
      _internal_set_success(from._internal_success());
    }
  }

  void AppendEntriesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:raft.AppendEntriesResponse)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void AppendEntriesResponse::CopyFrom(const AppendEntriesResponse &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:raft.AppendEntriesResponse)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool AppendEntriesResponse::IsInitialized() const
  {
    return true;
  }

  void AppendEntriesResponse::InternalSwap(AppendEntriesResponse *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(AppendEntriesResponse, success_) + sizeof(AppendEntriesResponse::success_) - PROTOBUF_FIELD_OFFSET(AppendEntriesResponse, term_)>(
        reinterpret_cast<char *>(&term_),
        reinterpret_cast<char *>(&other->term_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesResponse::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  void ClientRequest::InitAsDefaultInstance()
  {
  }
  class ClientRequest::_Internal
  {
  public:
  };

  ClientRequest::ClientRequest(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:raft.ClientRequest)
  }
  ClientRequest::ClientRequest(const ClientRequest &from)
      : ::PROTOBUF_NAMESPACE_ID::Message()
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_command().empty())
    {
      command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_command(),
                   GetArena());
    }
    ::memcpy(&index_, &from.index_,
             static_cast<size_t>(reinterpret_cast<char *>(&start_) -
                                 reinterpret_cast<char *>(&index_)) +
                 sizeof(start_));
    // @@protoc_insertion_point(copy_constructor:raft.ClientRequest)
  }

  void ClientRequest::SharedCtor()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientRequest_raftmessage_2eproto.base);
    command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(&index_, 0, static_cast<size_t>(reinterpret_cast<char *>(&start_) - reinterpret_cast<char *>(&index_)) + sizeof(start_));
  }

  ClientRequest::~ClientRequest()
  {
    // @@protoc_insertion_point(destructor:raft.ClientRequest)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void ClientRequest::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
    command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }

  void ClientRequest::ArenaDtor(void *object)
  {
    ClientRequest *_this = reinterpret_cast<ClientRequest *>(object);
    (void)_this;
  }
  void ClientRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void ClientRequest::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const ClientRequest &ClientRequest::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientRequest_raftmessage_2eproto.base);
    return *internal_default_instance();
  }

  void ClientRequest::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:raft.ClientRequest)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::memset(&index_, 0, static_cast<size_t>(reinterpret_cast<char *>(&start_) - reinterpret_cast<char *>(&index_)) + sizeof(start_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *ClientRequest::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // string command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10))
        {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "raft.ClientRequest.command"));
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // uint64 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16))
        {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // bool start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24))
        {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    } // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *ClientRequest::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:raft.ClientRequest)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string command = 1;
    if (this->command().size() > 0)
    {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "raft.ClientRequest.command");
      target = stream->WriteStringMaybeAliased(
          1, this->_internal_command(), target);
    }

    // uint64 index = 2;
    if (this->index() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_index(), target);
    }

    // bool start = 3;
    if (this->start() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_start(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:raft.ClientRequest)
    return target;
  }

  size_t ClientRequest::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:raft.ClientRequest)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string command = 1;
    if (this->command().size() > 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                        this->_internal_command());
    }

    // uint64 index = 2;
    if (this->index() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                        this->_internal_index());
    }

    // bool start = 3;
    if (this->start() != 0)
    {
      total_size += 1 + 1;
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void ClientRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:raft.ClientRequest)
    GOOGLE_DCHECK_NE(&from, this);
    const ClientRequest *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientRequest>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.ClientRequest)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.ClientRequest)
      MergeFrom(*source);
    }
  }

  void ClientRequest::MergeFrom(const ClientRequest &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:raft.ClientRequest)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.command().size() > 0)
    {
      _internal_set_command(from._internal_command());
    }
    if (from.index() != 0)
    {
      _internal_set_index(from._internal_index());
    }
    if (from.start() != 0)
    {
      _internal_set_start(from._internal_start());
    }
  }

  void ClientRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:raft.ClientRequest)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void ClientRequest::CopyFrom(const ClientRequest &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:raft.ClientRequest)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool ClientRequest::IsInitialized() const
  {
    return true;
  }

  void ClientRequest::InternalSwap(ClientRequest *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    command_.Swap(&other->command_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(ClientRequest, start_) + sizeof(ClientRequest::start_) - PROTOBUF_FIELD_OFFSET(ClientRequest, index_)>(
        reinterpret_cast<char *>(&index_),
        reinterpret_cast<char *>(&other->index_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata ClientRequest::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // ===================================================================

  void ClientResponse::InitAsDefaultInstance()
  {
  }
  class ClientResponse::_Internal
  {
  public:
  };

  ClientResponse::ClientResponse(::PROTOBUF_NAMESPACE_ID::Arena *arena)
      : ::PROTOBUF_NAMESPACE_ID::Message(arena)
  {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:raft.ClientResponse)
  }
  ClientResponse::ClientResponse(const ClientResponse &from)
      : ::PROTOBUF_NAMESPACE_ID::Message()
  {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    leaderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_leaderid().empty())
    {
      leaderid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leaderid(),
                    GetArena());
    }
    reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_reason().empty())
    {
      reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reason(),
                  GetArena());
    }
    ::memcpy(&index_, &from.index_,
             static_cast<size_t>(reinterpret_cast<char *>(&success_) -
                                 reinterpret_cast<char *>(&index_)) +
                 sizeof(success_));
    // @@protoc_insertion_point(copy_constructor:raft.ClientResponse)
  }

  void ClientResponse::SharedCtor()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientResponse_raftmessage_2eproto.base);
    leaderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(&index_, 0, static_cast<size_t>(reinterpret_cast<char *>(&success_) - reinterpret_cast<char *>(&index_)) + sizeof(success_));
  }

  ClientResponse::~ClientResponse()
  {
    // @@protoc_insertion_point(destructor:raft.ClientResponse)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  void ClientResponse::SharedDtor()
  {
    GOOGLE_DCHECK(GetArena() == nullptr);
    leaderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }

  void ClientResponse::ArenaDtor(void *object)
  {
    ClientResponse *_this = reinterpret_cast<ClientResponse *>(object);
    (void)_this;
  }
  void ClientResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *)
  {
  }
  void ClientResponse::SetCachedSize(int size) const
  {
    _cached_size_.Set(size);
  }
  const ClientResponse &ClientResponse::default_instance()
  {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientResponse_raftmessage_2eproto.base);
    return *internal_default_instance();
  }

  void ClientResponse::Clear()
  {
    // @@protoc_insertion_point(message_clear_start:raft.ClientResponse)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    leaderid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    reason_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::memset(&index_, 0, static_cast<size_t>(reinterpret_cast<char *>(&success_) - reinterpret_cast<char *>(&index_)) + sizeof(success_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  const char *ClientResponse::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx)
  {
#define CHK_(x)                     \
  if (PROTOBUF_PREDICT_FALSE(!(x))) \
  goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void)arena;
    while (!ctx->Done(&ptr))
    {
      ::PROTOBUF_NAMESPACE_ID::uint32 tag;
      ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
      CHK_(ptr);
      switch (tag >> 3)
      {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8))
        {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // string leaderid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18))
        {
          auto str = _internal_mutable_leaderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "raft.ClientResponse.leaderid"));
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // uint64 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24))
        {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      // string reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34))
        {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "raft.ClientResponse.reason"));
          CHK_(ptr);
        }
        else
          goto handle_unusual;
        continue;
      default:
      {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0)
        {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
                                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
      } // switch
    } // while
  success:
    return ptr;
  failure:
    ptr = nullptr;
    goto success;
#undef CHK_
  }

  ::PROTOBUF_NAMESPACE_ID::uint8 *ClientResponse::_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
  {
    // @@protoc_insertion_point(serialize_to_array_start:raft.ClientResponse)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // bool success = 1;
    if (this->success() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
    }

    // string leaderid = 2;
    if (this->leaderid().size() > 0)
    {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          this->_internal_leaderid().data(), static_cast<int>(this->_internal_leaderid().length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "raft.ClientResponse.leaderid");
      target = stream->WriteStringMaybeAliased(
          2, this->_internal_leaderid(), target);
    }

    // uint64 index = 3;
    if (this->index() != 0)
    {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_index(), target);
    }

    // string reason = 4;
    if (this->reason().size() > 0)
    {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "raft.ClientResponse.reason");
      target = stream->WriteStringMaybeAliased(
          4, this->_internal_reason(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
          _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:raft.ClientResponse)
    return target;
  }

  size_t ClientResponse::ByteSizeLong() const
  {
    // @@protoc_insertion_point(message_byte_size_start:raft.ClientResponse)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    // string leaderid = 2;
    if (this->leaderid().size() > 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                        this->_internal_leaderid());
    }

    // string reason = 4;
    if (this->reason().size() > 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                        this->_internal_reason());
    }

    // uint64 index = 3;
    if (this->index() != 0)
    {
      total_size += 1 +
                    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
                        this->_internal_index());
    }

    // bool success = 1;
    if (this->success() != 0)
    {
      total_size += 1 + 1;
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
    {
      return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
          _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
  }

  void ClientResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_merge_from_start:raft.ClientResponse)
    GOOGLE_DCHECK_NE(&from, this);
    const ClientResponse *source =
        ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientResponse>(
            &from);
    if (source == nullptr)
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.ClientResponse)
      ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
      // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.ClientResponse)
      MergeFrom(*source);
    }
  }

  void ClientResponse::MergeFrom(const ClientResponse &from)
  {
    // @@protoc_insertion_point(class_specific_merge_from_start:raft.ClientResponse)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.leaderid().size() > 0)
    {
      _internal_set_leaderid(from._internal_leaderid());
    }
    if (from.reason().size() > 0)
    {
      _internal_set_reason(from._internal_reason());
    }
    if (from.index() != 0)
    {
      _internal_set_index(from._internal_index());
    }
    if (from.success() != 0)
    {
      _internal_set_success(from._internal_success());
    }
  }

  void ClientResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from)
  {
    // @@protoc_insertion_point(generalized_copy_from_start:raft.ClientResponse)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  void ClientResponse::CopyFrom(const ClientResponse &from)
  {
    // @@protoc_insertion_point(class_specific_copy_from_start:raft.ClientResponse)
    if (&from == this)
      return;
    Clear();
    MergeFrom(from);
  }

  bool ClientResponse::IsInitialized() const
  {
    return true;
  }

  void ClientResponse::InternalSwap(ClientResponse *other)
  {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    leaderid_.Swap(&other->leaderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
        PROTOBUF_FIELD_OFFSET(ClientResponse, success_) + sizeof(ClientResponse::success_) - PROTOBUF_FIELD_OFFSET(ClientResponse, index_)>(
        reinterpret_cast<char *>(&index_),
        reinterpret_cast<char *>(&other->index_));
  }

  ::PROTOBUF_NAMESPACE_ID::Metadata ClientResponse::GetMetadata() const
  {
    return GetMetadataStatic();
  }

  // @@protoc_insertion_point(namespace_scope)
} // namespace raft
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::raft::LogEntry *Arena::CreateMaybeMessage<::raft::LogEntry>(Arena *arena)
{
  return Arena::CreateMessageInternal<::raft::LogEntry>(arena);
}
template <>
PROTOBUF_NOINLINE ::raft::RequestVote *Arena::CreateMaybeMessage<::raft::RequestVote>(Arena *arena)
{
  return Arena::CreateMessageInternal<::raft::RequestVote>(arena);
}
template <>
PROTOBUF_NOINLINE ::raft::RequestVoteResponse *Arena::CreateMaybeMessage<::raft::RequestVoteResponse>(Arena *arena)
{
  return Arena::CreateMessageInternal<::raft::RequestVoteResponse>(arena);
}
template <>
PROTOBUF_NOINLINE ::raft::AppendEntries *Arena::CreateMaybeMessage<::raft::AppendEntries>(Arena *arena)
{
  return Arena::CreateMessageInternal<::raft::AppendEntries>(arena);
}
template <>
PROTOBUF_NOINLINE ::raft::AppendEntriesResponse *Arena::CreateMaybeMessage<::raft::AppendEntriesResponse>(Arena *arena)
{
  return Arena::CreateMessageInternal<::raft::AppendEntriesResponse>(arena);
}
template <>
PROTOBUF_NOINLINE ::raft::ClientRequest *Arena::CreateMaybeMessage<::raft::ClientRequest>(Arena *arena)
{
  return Arena::CreateMessageInternal<::raft::ClientRequest>(arena);
}
template <>
PROTOBUF_NOINLINE ::raft::ClientResponse *Arena::CreateMaybeMessage<::raft::ClientResponse>(Arena *arena)
{
  return Arena::CreateMessageInternal<::raft::ClientResponse>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
